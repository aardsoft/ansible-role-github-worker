# 1. create worker user and group
# 2. download archive
# 3. extract archive, and register systemd service
# long term: add worker spawning harness
# https://github.com/actions/runner/releases
#
# TODO: split this into the main file, and an include looping over github runner variable
#       catch errors for reconfiguring runners

- name: include user creation tasks
  include_tasks: unix_user.yml

- set_fact:
    _labels: "{{github_worker_labels|join(',')}}"
  when: github_worker_labels is defined

- set_fact:
    _url: "{{github_worker_repository|default(github_worker.repository)}}"
  when: >
    github_worker_repository is defined or
    github_worker.repository is defined

- set_fact:
    _url: "{{github_worker_url|default(github_worker.url)}}"
  when: >
    github_worker_url is defined or
    github_worker.url is defined

# TODO: this is a a bit of partial logic for supporting multiple runners on a
#       single host; eventually that'd need to be replaced with a proper name
#       read from instance specific configuration
- set_fact:
    _runner_name: default

- set_fact:
    _gh_installer_version: "{{github.installer_version|default('2.313.0')}}"

- set_fact:
    _gh_installer: "https://github.com/actions/runner/releases/download/v{{_gh_installer_version}}/actions-runner-linux-x64-{{_gh_installer_version}}.tar.gz"
  when: >
    _gh_installer is undefined and
    ansible_os_family != "Darwin"

- set_fact:
    _gh_installer: "https://github.com/actions/runner/releases/download/v{{_gh_installer_version}}/actions-runner-osx-x64-{{_gh_installer_version}}.tar.gz"
  when: >
    _gh_installer is undefined and
    ansible_os_family == "Darwin" and
    ansible_machine != "arm64"

- set_fact:
    _gh_installer: "https://github.com/actions/runner/releases/download/v{{_gh_installer_version}}/actions-runner-osx-arm64-{{_gh_installer_version}}.tar.gz"
  when: >
    _gh_installer is undefined and
    ansible_os_family == "Darwin" and
    ansible_machine == "arm64"

- name: create override directory for service
  file:
    path: "/etc/systemd/system/actions.runner@{{_runner_name}}.service.d"
    owner: "root"
    group: "root"
    mode: "u=rwx,g=rx,o=r"
    state: directory
  when: >
    ansible_service_mgr == 'systemd'

- name: create directory for github runner ({{_runner_dir}})
  file:
    path: "{{_runner_dir}}"
    owner: "{{_github_user}}"
    group: "{{_github_group}}"
    mode: "u=rwx,g=rx,o=r"
    state: directory

- name: extract github runner
  unarchive:
    src: "{{_gh_installer}}"
    dest: "{{_runner_dir}}"
    owner: "{{_github_user}}"
    remote_src: yes
  when: ansible_os_family != "Darwin"

- include_role:
    name: basic-host
    tasks_from: with_gnu_tar
  when: ansible_os_family == "Darwin"

- name: extract github runner
  unarchive:
    src: "{{_gh_installer}}"
    dest: "{{_runner_dir}}"
    owner: "{{_github_user}}"
    remote_src: yes
  environment:
    PATH: "{{path_with_gnu_tar}}"
  when: ansible_os_family == "Darwin"

- name: copy override configuration
  template:
    src: actions.runner.conf.j2
    dest: "/etc/systemd/system/actions.runner@{{_runner_name}}.service.d/override.conf"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: >
    ansible_service_mgr == 'systemd'

- name: copy service file
  template:
    src: actions.runner@.service.j2
    dest: /etc/systemd/system/actions.runner@.service
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: >
    ansible_service_mgr == 'systemd'

- fail:
    msg: "Warning: Worker registration not possible as URL is missing. Upcoming steps may fail."
  when: _url is undefined
  ignore_errors: True

- name: register github worker
  command: >
    {{gitub.runner_arch|default('')}} ./config.sh --url {{_url}} --name {{inventory_hostname}} --work {{_github_home}}/work --replace --unattended --labels {{_labels}} --token {{gh_token}}
  args:
    chdir: "{{_runner_dir}}"
  when: >
    gh_token is defined and
    _url is defined
  become: True
  become_user: "{{_github_user}}"

- name: start and enable service
  service:
    enabled: yes
    state: started
    name: "actions.runner@{{_runner_name}}"
  when: ansible_os_family != "Darwin"

- name: copy runsvc.sh
  copy:
    src: "{{_runner_dir}}/bin/runsvc.sh"
    dest: "{{_runner_dir}}/runsvc.sh"
    remote_src: true
    mode: 0755
    owner: "{{_github_user}}"

- name: start and enable service (Darwin)
  include_role:
    name: data-utilities
    tasks_from: manage_service
  vars:
    service:
      name: "actions.runner.{{_runner_name}}"
      exec_start: "{{_runner_dir}}/runsvc.sh"
      user: "{{_github_user}}"
      standard_output: "{{_github_home}}/{{_runner_name}}.out"
      standard_error: "{{_github_home}}/{{_runner_name}}.err"
      environment:
        ACTIONS_RUNNER_SVC: 1
      working_directory: "{{_runner_dir}}"
      session_create: true
      processtype: Interactive
  when: ansible_os_family == "Darwin"
